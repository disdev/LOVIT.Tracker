@page
@model LOVIT.Tracker.Pages.Participants.IndexModel
@using LOVIT.Tracker.Utilities;
@using LOVIT.Tracker.Models;

@section Styles {
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator.min.css" rel="stylesheet">
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator_bootstrap5.min.css" rel="stylesheet">
<style>
.tabulator-row.tabulator-row-even {
    background-color: #fff;
}
.tabulator-row {
    border-bottom: 1px solid #ccc;
}
</style>
}

<div class="row">
    <div class="col-auto me-auto mb-3">
        <div class="hstack gap-3">
            <div>
                <img src="@Model.Participant.ProfilePicture" class="mr-3 rounded-circle img-responsive" />
            </div>
            <div>
                <h2>
                    @Model.Participant.FullName
                </h2>
                @if (!String.IsNullOrEmpty(Model.Participant.Bib))
                {
                    <h5>
                        #@Model.Participant.Bib
                    </h5>
                }
                <p>
                    @Model.Participant.Hometown
                </p>
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-lg-3 col-auto me-2">
        @if (Model.IsAuthenticated && Model.PhoneNumberSet == false)
        {
            <div class="alert alert-info">To receive notifications, first set your phone number in your <a
                asp-page="/account/profile">profile</a>. Then, you can return here to sign up.</div>
        }
        else if (Model.IsAuthenticated && Model.PhoneNumberSet == true)
        {
            @if (Model.ShowNotifyOption)
            {
                <div class="w-100 text-end">
                    <a class="btn btn-info" asp-page="/participants/watch" asp-route-participantId="@Model.Participant.Id">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bell"
                    viewBox="0 0 16 16">
                            <path
                        d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zM8 1.918l-.797.161A4.002 4.002 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4.002 4.002 0 0 0-3.203-3.92L8 1.917zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5.002 5.002 0 0 1 13 6c0 .88.32 4.2 1.22 6z" />
                        </svg>
                        Get notifications
                    </a>
                </div>
            }
        }
        else
        {
            <div class="alert alert-info">To receive notifications, create your account and set your phone number in your
                profile. Then, you can return here to sign up.</div>
        }

    </div>
</div>

<div class="row">
    <div class="col">
        <p class="fst-italic">Times in italics are estimated based on our machine learning algorithm.</p>
    </div>
</div>

<div class="row">
    <div class="col">
        <div id="participant-table" style="max-height: 100%;">
        </div>
    </div>
</div>

@section Scripts {
<script src="https://cdn.rawgit.com/katmore/gpu-loading-overlay/master/src/loadingOverlay.js"></script>
<script src="https://cdn.jsdelivr.net/npm/luxon@3.2.1/build/global/luxon.min.js"></script>
<script src="https://unpkg.com/tabulator-tables@5.4.3/dist/js/tabulator.min.js"></script>

<script>
    let race, segments, participant, checkins, predictions, table;
    let _participantId = "@Html.Raw(Model.Participant.Id)";
    let spinner = loadingOverlay.activate();

    async function getData() {
        participant = await getParticipant(_participantId);
        race = await getRace(participant.raceId);
        segments = await getSegments(participant.raceId);
        checkins = await getCheckins(participant.id);
        predictions = await getPredictions();
    }

    async function getRace(raceId) {
        const response = await fetch(`/api/races/${raceId}`);
        return response.json();
    }

    async function getSegments(raceId) {
        const response = await fetch(`/api/segments/${raceId}`);
        return response.json();
    }

    async function getParticipant(participantId) {
        const response = await fetch(`/api/participants/${participantId}`);
        return response.json();
    }

    async function getCheckins(participantId) {
        const response = await fetch(`/api/participants/${participantId}/checkins`);
        return response.json();
    }

    async function getPredictions() {
        var segmentsToPredict = [];
        var previousCheckin;
        var raceStart = luxon.DateTime.fromISO(`${race.start}Z`);

        segments.forEach((segment) => {
            var checkin = checkins.find((c) => c.segmentId === segment.id);
            var totalElapsed = 0;
            if (!checkin) {
                segmentsToPredict.push({
                    fullName: participant.fullName,
                    age: participant.age,
                    rank: participant.rank,
                    gender: participant.gender,
                    raceCode: race.code,
                    segmentOrder: segment.order,
                    segmentDistance: segment.distance,
                    totalDistance: segment.totalDistance,
                    lastTotalElapsed: previousCheckin ? luxon.DateTime.fromISO(`${previousCheckin.when}Z`).diff(raceStart).as("seconds") : 0,
                    segmentElapsed: 0
                });
            } else {
                previousCheckin = checkin;
            }
        });

        return await getMultiplePredictions(segmentsToPredict);
    }

    async function getMultiplePredictions(modelInput) {
        const response = await fetch("https://lovit-predictions-website-dev.azurewebsites.net/api/predict/multiple",{
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify(modelInput)
        });
        return response.json();
    }

    async function getSinglePrediction(modelInput) {
        const response = await fetch("https://lovit-predictions-website-dev.azurewebsites.net/api/predict/single",{
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify(modelInput)
        });
        return response.json();
    }

    function formatSecondsToTime(secondsElapsed) {
        var hours = Math.floor(secondsElapsed / 3600);
        var minutes = Math.floor((secondsElapsed - hours * 3600) / 60);
        var seconds = Math.round(secondsElapsed - hours * 3600 - minutes * 60);

        if (secondsElapsed >= 3600) {
            return `${hours}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
        } else {
            return `${minutes}:${String(seconds).padStart(2, "0")}`;
        }
    }

    function cellFormatter(cell) {
        var data = cell.getData();
        if ((data.previousSegmentPredicted && cell.getColumn().getField().startsWith("segment")) || data.predicted) {
            cell.getElement().classList.add("fst-italic");
            cell.getElement().style.background = "#33669924";
        }
        return cell.getValue();
    }

    getData().then(() => {
        var tableData = [];
        var previousCheckin = {};
        var previousSegmentPredicted = false;

        segments.forEach((segment) => {
            var checkin = checkins.find((c) => c.segmentId === segment.id);
            var raceStart = luxon.DateTime.fromISO(`${race.start}Z`);

            var row = {
                number: segment.order,
                name: segment.name,
                distance: segment.distance,
                totalDistance: segment.totalDistance,
                segment: segment,
                previousSegmentPredicted: previousSegmentPredicted
            };

            var checkinWhen, segmentElapsed;
            if (checkin) {
                checkinWhen = luxon.DateTime.fromISO(`${checkin.when}Z`);
                segmentElapsed = checkin.elapsed;

                previousCheckin = checkin;
                previousSegmentPredicted = true;
            } else {
                var prediction = predictions.find((p) => p.segmentOrder === segment.order);
                var previousCheckinWhen = luxon.DateTime.fromISO(`${previousCheckin.when}`);

                segmentElapsed = prediction.segmentElapsed;
                checkinWhen = previousCheckinWhen.plus({ seconds: prediction.segmentElapsed });
                
                previousCheckin = {
                    when: checkinWhen
                };
                previousSegmentPredicted = true;
                row.predicted = true;
            }
            
            row.when = checkinWhen.toFormat("EEE t");
            
            row.segmentTime = formatSecondsToTime(segmentElapsed);
            row.segmentPace = formatSecondsToTime(segmentElapsed / segment.distance);

            var totalElapsed = checkinWhen.diff(raceStart).as("seconds");
            row.overallTime = formatSecondsToTime(totalElapsed);
            row.overallPace = formatSecondsToTime(totalElapsed / segment.totalDistance);

            tableData.push(row);
        });

        table = new Tabulator("#participant-table", {
            data: tableData, 
            layout: "fitColumns",
            columns: [ 
                { title: "Order", field: "number", width: 70, frozen: true, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false },
                {
                    title: "Name", field: "name", width: 325, vertAlign: "middle", headerSort: false, formatter: "link", formatterParams: {
                        url: function (cell) {
                            var data = cell.getData();
                            return `/segments?id=${data.participantId}`;
                        }
                    }
                },
                { title: "Distance", field: "distance", minWidth: 120, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false },
                { title: "Total Distance", field: "totalDistance", minWidth: 120, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false },
                { title: "Checkin", field: "when", minWidth: 120, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false, formatter: cellFormatter },
                { title: "Segment Time", field: "segmentTime", minWidth: 120, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false, formatter: cellFormatter },
                { title: "Segment Pace", field: "segmentPace", minWidth: 120, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false, formatter: cellFormatter },
                { title: "Overall Time", field: "overallTime", minWidth: 120, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false, formatter: cellFormatter },
                { title: "OverallPace", field: "overallPace", minWidth: 120, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false, formatter: cellFormatter }
            ]
        });

        loadingOverlay.cancel(spinner);
    });

</script>
}