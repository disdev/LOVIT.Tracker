@page
@model IndexModel
@using LOVIT.Tracker.Models
@using LOVIT.Tracker.Utilities;
@{
    ViewData["Title"] = "Home page";
}


@section Styles {
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@29.0.0/styles/ag-grid.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@29.0.0/styles/ag-theme-material.css" />
<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet" />
<style>
    .ag-theme-material {
        --ag-grid-size: 6px;
        --ag-list-item-height: 18px;
        --ag-cell-horizontal-padding: 4px;
    }
</style>
}

<div class="row-fluid">
    <div class="col">
        <ul class="nav nav-pills nav-justified device-small d-lg-none pb-3 mx-auto" role="tablist" id="race-tabs">
            @foreach (var race in Model.Races)
            {
                <li class="nav-item">
                    <a class="nav-link" id="race-@race.Code-tab" data-bs-toggle="pill" data-bs-target="#race-@race.Code" type="button" role="tab" aria-controls="race-@race.Code" aria-selected="false">@race.Name</a>
                </li>
            }
        </ul>
    </div>
</div>
<div class="d-none">
    <li id="row-template" class="list-group-item">
        <div class="d-flex align-items-center">
            <div class="flex-shrink-0 p-2">
                <span id="place"></span>
            </div>
            <div class="flex-shrink-0 p-2 d-none d-md-flex">
                <img id="profile-image" style="max-width: 60px;" src="https://via.placeholder.com/60">
            </div>
            <div class="flex-grow-1 p-2">
                <span id="first-name" class="d-none d-sm-inline"></span>
                <span id="last-name" class="d-xs-inline"></span>
            </div>
            <div class="p-2">
                <span id="distance"></span>
            </div>
            <div class="p-2">
                <span id="time"></span>
            </div>
            <div class="p-2 d-none d-md-flex">
                <span id="pace"></span>
            </div>
        </div>
    </li>
</div>
<div class="tab-content d-flex">
    @foreach (var race in Model.Races)
    {
        <div class="flex-grow-1 d-lg-block tab-pane col-xs-12 col-xl-6 mt-2 px-md-2" id="race-@race.Code" role="tabpanel" aria-labelledby="tab-@race.Code">
            <div class="card">
                <ul id="leaderboard-@race.Code" class="list-group list-group-flush"></ul>
            </div>
        </div>
    }
</div>

@section Scripts {
<script src="https://cdn.rawgit.com/katmore/gpu-loading-overlay/master/src/loadingOverlay.js"></script>
<script type="text/javascript">
    let races, leaders;
    let spinner = loadingOverlay.activate();
    let rowTemplate = document.getElementById("row-template");

    async function getData() {
        races = await getRaces();
        leaders = await getLeaders();
    }

    async function getRaces() {
        const response = await fetch("/api/races");
        return response.json();
    }

    async function getLeaders() {
        const response = await fetch("/api/leaders");
        return response.json();
    }

    function calculatePaceInSeconds(paceInSeconds) {
        var minutes = (paceInSeconds / 60).ToString();
        var seconds = String(paceInSeconds % 60).padStart(2, "0");
    }

    function formatSecondsToTime(secondsElapsed) {
        var hours = Math.floor(secondsElapsed / 3600);
        var minutes = Math.floor((secondsElapsed - hours * 3600) / 60);
        var seconds = Math.round(secondsElapsed - hours * 3600 - minutes * 60);
        
        if (secondsElapsed >= 3600) {
            return `${hours}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
        } else {
            return `${minutes}:${String(seconds).padStart(2, "0")}`;
        }
    }

    getData().then((data) => {
        races.forEach((race) => {
            var leaderboard = document.getElementById(`leaderboard-${race.code}`);
            var raceLeaders = leaders.filter((leader) => leader.participant.raceId === race.id );
            var placeIndex = 1;
            raceLeaders.forEach((raceLeader) => {
                var leaderboardEntry = rowTemplate.cloneNode(true);
                
                leaderboardEntry.querySelector("#profile-image").src = raceLeader.participant.profilePicture;
                leaderboardEntry.querySelector("#first-name").innerText = raceLeader.participant.firstName;
                leaderboardEntry.querySelector("#last-name").innerText = raceLeader.participant.lastName;

                if (raceLeader.overallTime > 0) {
                    leaderboardEntry.querySelector("#place").innerText = placeIndex;
                    leaderboardEntry.querySelector("#distance").innerText = `${raceLeader.lastSegment.totalDistance} miles`;
                    leaderboardEntry.querySelector("#time").innerText = formatSecondsToTime(raceLeader.overallTime);
                    leaderboardEntry.querySelector("#pace").innerText = formatSecondsToTime(raceLeader.overallPace);
                }
                
                leaderboard.appendChild(leaderboardEntry);
                placeIndex++;
            });
        });

        loadingOverlay.cancel(spinner);
    });

    var firstTabEl = document.querySelector('#race-tabs li:first-child a')
    var firstTab = new bootstrap.Tab(firstTabEl);
    firstTab.show()
</script>
}