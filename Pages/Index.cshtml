@page
@model IndexModel
@using LOVIT.Tracker.Models
@using LOVIT.Tracker.Utilities;
@{
    ViewData["Title"] = "Home";
}

@section Styles {
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator.min.css" rel="stylesheet">
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator_bootstrap5.min.css" rel="stylesheet">
}

<div class="row-fluid">
    <div class="col">
        <ul class="nav nav-pills nav-justified device-small d-lg-none pb-3 mx-auto" role="tablist" id="race-tabs">
            @foreach (var race in Model.Races)
            {
                <li class="nav-item">
                    <a class="nav-link" id="race-@race.Code-tab" data-bs-toggle="pill" data-bs-target="#race-@race.Code"
                    type="button" role="tab" aria-controls="race-@race.Code" aria-selected="false">@race.Name</a>
                </li>
            }
        </ul>
    </div>
</div>

<div class="tab-content d-flex">
    @foreach (var race in Model.Races)
    {
        <div class="flex-grow-1 d-lg-block tab-pane col-xs-12 col-xl-6 mt-2 px-md-2" id="race-@race.Code" role="tabpanel"
        aria-labelledby="tab-@race.Code">
            <div class="card">
                <div class="card-header">
                    <h1 class="text-center p-2">@race.Code</h1>
                </div>
                <div id="leaderboard-@race.Code" style="max-height: 100%;"></div>
            </div> 
        </div>
    }
</div>

@section Scripts {
<script src="https://cdn.rawgit.com/katmore/gpu-loading-overlay/master/src/loadingOverlay.js"></script>
<script src="https://cdn.jsdelivr.net/npm/luxon@3.2.1/build/global/luxon.min.js"></script>
<script src="https://unpkg.com/tabulator-tables@5.4.3/dist/js/tabulator.min.js"></script>

<script type="text/javascript">
    let races, leaders;
    let spinner = loadingOverlay.activate();
    let rowTemplate = document.getElementById("row-template");

    async function getData() {
        races = await getRaces();
        leaders = await getLeaders();
    }

    async function getRaces() {
        const response = await fetch("/api/races");
        return response.json();
    }

    async function getLeaders() {
        const response = await fetch("/api/leaders");
        return response.json();
    }

    function formatSecondsToTime(secondsElapsed) {
        var hours = Math.floor(secondsElapsed / 3600);
        var minutes = Math.floor((secondsElapsed - hours * 3600) / 60);
        var seconds = Math.round(secondsElapsed - hours * 3600 - minutes * 60);

        if (secondsElapsed >= 3600) {
            return `${hours}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
        } else {
            return `${minutes}:${String(seconds).padStart(2, "0")}`;
        }
    }

    getData().then((data) => {
        races.forEach((race) => {
            var tableData = [];
            var raceLeaders = leaders.filter((leader) => leader.participant.raceId === race.id);
            var placeIndex = 1;

            raceLeaders.forEach((raceLeader) => {
                var row = {
                    participantId: raceLeader.participantId,
                    place: placeIndex,
                    name: raceLeader.participant.fullName,
                    picture: raceLeader.participant.profilePicture
                };

                if (raceLeader.overallTime > 0) {
                    row.distance = `${raceLeader.lastSegment.totalDistance} miles`;
                    row.time = formatSecondsToTime(raceLeader.overallTime);
                    row.pace = formatSecondsToTime(raceLeader.overallPace);
                }

                tableData.push(row);
                placeIndex++;
            });

            var table = new Tabulator(`#leaderboard-${race.code}`, {
                data: tableData,
                layout: "fitColumns",
                columns: [
                    { title: "Place", field: "place", width: 60, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false},
                    { title: "", field: "picture", formatter: "image", formatterParams: { height: "48px", width: "48px" }, width: 60, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false},
                    { title: "Name", field: "name", vertAlign: "middle", headerSort: false, formatter:"link", formatterParams: {
                        url: function (cell) { 
                            var data = cell.getData();
                            return `/participants?id=${data.participantId}`;
                        }
                    }},
                    { title: "Distance", field: "distance", vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false },
                    { title: "Time", field: "time", vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false },
                    { title: "Pace", field: "pace", vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false }
                ]
            });
        });

        loadingOverlay.cancel(spinner);
    });

    var firstTabEl = document.querySelector('#race-tabs li:first-child a')
    var firstTab = new bootstrap.Tab(firstTabEl);
    firstTab.show()
</script>
}