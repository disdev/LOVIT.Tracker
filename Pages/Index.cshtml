@page
@model IndexModel
@using LOVIT.Tracker.Models
@using LOVIT.Tracker.Utilities;
@{
    ViewData["Title"] = "Home page";
}

<div class="row-fluid">
    <div class="col">
        <ul class="nav nav-pills nav-justified device-small d-lg-none pb-3 mx-auto" role="tablist" id="race-tabs">
            @foreach (var race in Model.Races)
            {
                <li class="nav-item">
                    <a class="nav-link" id="race-@race.Code-tab" data-bs-toggle="pill" data-bs-target="#race-@race.Code" type="button" role="tab" aria-controls="race-@race.Code" aria-selected="false">@race.Name</a>
                </li>
            }
        </ul>
    </div>
</div>
<div class="tab-content d-flex">
    @foreach (var race in Model.Races)
    {
        <div class="flex-grow-1 d-lg-block tab-pane col-xs-12 col-xl-6 mt-2 px-md-2" id="race-@race.Code" role="tabpanel" aria-labelledby="tab-@race.Code">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title">@race.Code</h2>
                    <div id="race-grid-@race.Code" data-race="@race.Code" class="grid ag-theme-material"></div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
<script src="https://cdn.rawgit.com/katmore/gpu-loading-overlay/master/src/loadingOverlay.js"></script>
<script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
<script type="text/javascript">
    let races, leaders, gridOptions;
    let spinner = loadingOverlay.activate();

    async function getData() {
        races = await getRaces();
        leaders = await getLeaders();
    }

    async function getRaces() {
        const response = await fetch("/api/races");
        return response.json();
    }

    async function getLeaders() {
        const response = await fetch("/api/leaders");
        return response.json();
    }

    function calculatePaceInSeconds(paceInSeconds) {
        var minutes = (paceInSeconds / 60).ToString();
        var seconds = String(paceInSeconds % 60).padStart(2, "0");
    }

    function formatSecondsToTime(secondsElapsed) {
        var hours = Math.floor(secondsElapsed / 3600);
        var minutes = Math.floor((secondsElapsed - hours * 3600) / 60);
        var seconds = Math.round(secondsElapsed - hours * 3600 - minutes * 60);
        
        if (secondsElapsed >= 3600) {
            return `${hours}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
        } else {
            return `${minutes}:${String(seconds).padStart(2, "0")}`;
        }
    }

    getData().then((data) => {
        var columns = [
            {headerName: "Place", field: "place"},
            {headerName: "Participant", field: "participant", cellRenderer: function(params) {
                let id = "";
                console.log(params);
                if (params.data.bib) {
                    id = params.data.bib;
                } else {
                    id = params.data.participantId;
                }
                return `<a href="/participants?id=${id}">${params.value}</a>`;
            }},
            {headerName: "Last Checkpoint", field: "lastCheckpoint"},
            {headerName: "Overall Time", field: "overallTime"},
            {headerName: "Overall Pace", field: "overallPace"}
        ];
        
        var tableData = [];
        races.forEach((race) => {
            var raceLeaders = leaders.filter((leader) => leader.participant.raceId === race.id );
            var placeIndex = 1;
            raceLeaders.forEach((raceLeader) => {
                var row = {
                    participant: raceLeader.participant.fullName,
                    race: race.code,
                    participantId: raceLeader.participantId
                };

                if (raceLeader.overallTime > 0) {
                    row.place = placeIndex;
                    row.participant = raceLeader.participant.fullName;
                    row.lastCheckpoint = `${raceLeader.lastSegment.totalDistance} miles`;
                    row.overallTime = formatSecondsToTime(raceLeader.overallTime);
                    row.overallPace = formatSecondsToTime(raceLeader.overallPace);
                }

                tableData.push(row);
                placeIndex++;
            });
        });

        races.forEach((race) => {
            var gridOptions = {
                domLayout:  "autoHeight",
                columnDefs: columns,
                rowData: tableData.filter((row) => row.race === race.code)
            };

            var gridDiv = document.getElementById(`race-grid-${race.code}`);
            new agGrid.Grid(gridDiv, gridOptions);
            gridOptions.api.sizeColumnsToFit();
        });

        loadingOverlay.cancel(spinner);
    });

    var firstTabEl = document.querySelector('#race-tabs li:first-child a')
    var firstTab = new bootstrap.Tab(firstTabEl);
    firstTab.show()
</script>
}