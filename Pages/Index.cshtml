@page
@model IndexModel
@using LOVIT.Tracker.Models
@using LOVIT.Tracker.Utilities;
@{
    ViewData["Title"] = "Home";
}

@section Styles {
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator.min.css" rel="stylesheet">
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator_bootstrap5.min.css" rel="stylesheet">
<style>
.leaderboard {
    max-height: 100%;
    width: 100%;
}
</style>
}

<div class="row-fluid">
    <div class="col">
        <ul class="nav nav-pills nav-justified device-small d-lg-none pb-3 mx-auto" role="tablist" id="race-tabs">
            @foreach (var race in Model.Races)
            {
                <li class="nav-item">
                    <a class="nav-link" id="race-@race.Code-tab" data-bs-toggle="pill" data-bs-target="#race-@race.Code"
                    type="button" role="tab" aria-controls="race-@race.Code" aria-selected="false">@race.Name</a>
                </li>
            }
        </ul>
    </div>
</div>

<div class="tab-content d-flex">
    @foreach (var race in Model.Races)
    {
        <div class="flex-grow-1 d-lg-block tab-pane col-xs-12 col-xl-6 mt-2 px-md-2" id="race-@race.Code" role="tabpanel"
        aria-labelledby="tab-@race.Code">
            <div class="card">
                <div class="card-header">
                    <h1 class="text-center p-2">@race.Code</h1>
                </div>
                <div id="leaderboard-container-@race.Code"></div>
            </div> 
        </div>
    }
</div>

@section Scripts {
<script src="https://cdn.rawgit.com/katmore/gpu-loading-overlay/master/src/loadingOverlay.js"></script>
<script src="https://cdn.jsdelivr.net/npm/luxon@3.2.1/build/global/luxon.min.js"></script>
<script src="https://unpkg.com/tabulator-tables@5.4.3/dist/js/tabulator.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
<script id="leaderboard-template" type="text/x-handlebars">
    <table id="table-{{race.code}}" class="table table-responsive table-striped">
        <thead>
            <tr>
                <th scope="col text-center">#</th>
                <th scope="col">Participant</th>
                <th scope="col text-center">Distance</th>
                <th scope="col text-center">Time</th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            {{#each participants}}
            <tr>
                <th scope="row">{{this.place}}</th>
                <td>
                    <div class="d-flex">
                        <div class="d-none d-sm-flex p-sm-2 align-items-center">
                            <img src="{{this.participant.profilePicture}}" class="avatar rounded-3 img-responsive" style="width: 72px; height: 72px; object-fit: cover;"/>
                        </div>
                        <div class="d-flex flex-column p-md-2 justify-content-center">
                            <div><a href="/participants/index?id={{this.participant.id}}">{{this.participant.fullName}}</a></div>
                            <div><small class="text-muted">{{this.participant.hometown}}</small></div>
                            {{#if this.participant.bib}}
                            <div><small class="text-muted">#{{this.participant.bib}}</small></div>
                            {{/if}}
                        </div>
                        <div class="d-flex align-items-center">
                            {{#if this.includeBadge}}
                            <span class="d-inline badge {{this.participant.statusClass}}" style="margin-left: 5px;">{{this.participant.statusText}}</span>
                            {{/if}}
                        </div>
                    </div>
                </td>
                <td>{{this.distance}}</td>
                <td>{{this.time}}</td>
            </tr>
            {{/each}}
        </tbody>
    </table>
</script>
<script type="text/javascript">
    let races, leaders;
    let spinner = loadingOverlay.activate();

    async function getData() {
        races = await getRaces();
        leaders = await getLeaders();
    }

    async function getRaces() {
        const response = await fetch("/api/races");
        return response.json();
    }

    async function getLeaders() {
        const response = await fetch("/api/leaders");
        return response.json();
    }

    function formatSecondsToTime(secondsElapsed) {
        var hours = Math.floor(secondsElapsed / 3600);
        var minutes = Math.floor((secondsElapsed - hours * 3600) / 60);
        var seconds = Math.round(secondsElapsed - hours * 3600 - minutes * 60);

        if (secondsElapsed >= 3600) {
            return `${hours}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
        } else {
            return `${minutes}:${String(seconds).padStart(2, "0")}`;
        }
    }

    getData().then((data) => {
        races.forEach((race) => {
            var tableData = [];
            var raceLeaders = leaders.filter((leader) => leader.participant.raceId === race.id);
            var placeIndex = 1;

            raceLeaders.forEach((raceLeader) => {
                var row = {
                    place: placeIndex,
                    participant: raceLeader.participant,
                    picture: `<img src="${raceLeader.participant.profilePicture}" class="rounded-3" style="height: 48px; width: 48px;"/>`
                };

                if (raceLeader.participant.status != 0 && raceLeader.participant.status != 2) {
                    row.includeBadge = true;
                }

                if (raceLeader.overallTime > 0) {
                    row.distance = `${raceLeader.lastSegment.totalDistance} miles`;
                    row.time = formatSecondsToTime(raceLeader.overallTime);
                    row.pace = formatSecondsToTime(raceLeader.overallPace);
                }

                tableData.push(row);
                placeIndex++;
            });

            let leaderboardTemplate = Handlebars.compile(document.getElementById("leaderboard-template").innerHTML);
            let leaderboardData = {
                race: race,
                participants: tableData
            };
            document.getElementById(`leaderboard-container-${race.code}`).innerHTML = leaderboardTemplate(leaderboardData);
        });

        loadingOverlay.cancel(spinner);
    });

    var firstTabEl = document.querySelector('#race-tabs li:first-child a')
    var firstTab = new bootstrap.Tab(firstTabEl);
    firstTab.show()
</script>
}