@page
@model LOVIT.Tracker.Pages.Maps.IndexModel
@{
    ViewData["Title"] = "Course Map";
}

@section Styles {
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
    integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=" crossorigin="" />
<style>
    #map {
        height: 400px;
    }
</style>
}

<div class="row">
    <div class="col-xs-12 col-lg-3">
        <div id="races-radio-group" class="btn-group mb-3" role="group"></div>
        <div class="mb-3">
            <select id="segments-dropdown" class="form-select"></select>
        </div>
        <div class="mb-3">
            <dl class="row">
                <dt class="col-xs-6 col-lg-12">Starting Checkpoint</dt>
                <dd id="segment-checkpoint-start" class="col-xs-6 col-lg-12"></dd>
                <dt class="col-xs-6 col-lg-12">Ending Checkpoint</dt>
                <dd id="segment-checkpoint-end" class="col-xs-6 col-lg-12"></dd>
                <dt class="col-xs-6 col-lg-12">Segment Distance</dt>
                <dd id="segment-distance" class="col-xs-6 col-lg-12"></dd>
                <dt class="col-xs-6 col-lg-12">Total Distance</dt>
                <dd id="segment-total-distance" class="col-xs-6 col-lg-12"></dd>
            </dl>
        </div>
        
    </div>
    <div class="col-xs-12 col-lg-9">
        <div id="map"></div>
    </div>
</div>

<div class="row">
    <div class="col">
        <div id="elevation-chart" class="mb-3"></div>
    </div>
</div>

@section Scripts {
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
    integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=" crossorigin=""></script>
<script src="/js/leaflet-measure-path.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/10.3.2/themes/grid-light.min.js"
    integrity="sha512-Hsek8k83ikrWUFBEBxui5ePxtBxcXIuVHhiwSKMBJT5pucTIfW4Uuu9m0vw8qCVLGmw58YS0g8WiwcI5TXVgCg=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script>
    let races, segments, checkpoints, layer, selectedRace;
    var elevationData = []; // [distance, elevation]
    let segmentCache = {}; // this includes all elevationData for individual segments.

    var map = L.map('map', { minZoom: 5, maxZoom: 16 })
        .on('load', setupMap)
        .setView([34.55, -93.335], 13);

    L.tileLayer('https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}', {
        maxZoom: 20,
        attribution: '<a href="https://usgs.gov/">U.S. Geological Survey</a>'
    }).addTo(map);

    var lineStyle = {
        "color": "blue",
        "weight": 5,
        "opacity": 1
    };

    function onEachFeature(f, l) {
        //console.log(calculateDistance(f.geometry.coordinates[0]));
        //console.log(f.geometry.coordinates[0]);
    }

    async function setupMap() {
        var racesResponse = await fetch('/api/races');
        races = await racesResponse.json();
        var checkpointsResponse = await fetch('/api/checkpoints');
        checkpoints = await checkpointsResponse.json();
        var segmentsResponse = await fetch('/api/segments');
        segments = await segmentsResponse.json();

        selectedRace = races.find((r) => r.code === "100M");


        var racesRadioGroup = document.getElementById("races-radio-group");
        races.forEach((race) => addRaceToRadioGroup(racesRadioGroup, race));

        var dropdown = document.getElementById("segments-dropdown");
        dropdown.addEventListener("change", selectSegment);

        layer = L.geoJSON(null, { "onEachFeature": onEachFeature }).addTo(map);
        layer.setStyle(lineStyle);

        document.getElementById("btnRace-100M").click();
    }

    async function drawSegment(segment) {
        let segmentJson;
        if (!segmentCache[segment.geoJson]) {
            segmentJson = await (await fetch(`/js/maps/segments/${selectedRace.code}/${segment.geoJson}`)).json();
            segmentCache[segment.geoJson] = segmentJson;
        } else {
            segmentJson = segmentCache[segment.geoJson];
        }
        layer.addData(segmentJson);
        layer.setStyle(lineStyle);
        addElevationChartData(segmentJson, segment);
    }

    function addElevationChartData(geoJson, segment) {
        let totalDistance = segment.totalDistance - segment.distance;
        let coordinates = geoJson.features[0].geometry.coordinates[0];

        elevationData.push([0, coordinates[0][2] * 3.2808]);
        for (i = 1; i < coordinates.length; i++) {
            let currentCoordinate = L.latLng(coordinates[i][1],coordinates[i][0]);
            let previousCoordinate = L.latLng(coordinates[i - 1][1],coordinates[i - 1][0]);
            totalDistance += ((map.distance(previousCoordinate, currentCoordinate) * 3.2808) / 5280);
            
            elevationData.push([totalDistance, coordinates[i][2] * 3.2808]);
        }
    }

    function drawElevationChart() {
        elevationData.sort((a, b) => a[0] - b[0]);
        
        Highcharts.chart("elevation-chart", {
            title: {
                text: "Segment Elevation"
            },
            yAxis: {
                title: {
                    text: 'Elevation (feet)'
                }
            },
            tooltip: {
                pointFormat: '<span>Distance: {point.x:.2f} miles</span><br/><span>Elevation: {point.y:.2f} feet</span>'
            },
            series: [{
                data: elevationData,
                lineWidth: 1,
                name: "Elevation"
            }]
        });
    }

    function selectRace(raceCode) {
        if (layer) {
            layer.clearLayers();
            elevationData = [];
        }

        selectedRace = races.find((r) => r.code === raceCode);

        var raceSegments = segments.filter((segment) => segment.raceId === selectedRace.id);
        var dropdown = document.getElementById("segments-dropdown");
        dropdown.innerHTML = "";

        var allOption = document.createElement("option");
        allOption.setAttribute("id", `all-${selectedRace.code}`);
        allOption.innerText = "Show all segments";
        allOption.selected = true;
        dropdown.appendChild(allOption);

        raceSegments.forEach((segment) => {
            var option = document.createElement("option");
            option.setAttribute("id", `segment-${segment.id}`);
            option.setAttribute("value", segment.id);
            option.innerText = segment.name;
            dropdown.appendChild(option);

            drawSegment(segment);
        });

        checkpoints.forEach((c) => {
            //drawCheckpoint(c);
        });

        setTimeout(drawElevationChart,100)

        return raceSegments;
    }

    function selectSegment(event) {
        layer.clearLayers();
        elevationData = [];

        if (event.target.selectedIndex === 0) {
            selectRace(selectedRace.code);
            setTimeout(drawElevationChart,100);
        } else {
            segmentId = event.target.value;
            var segment = segments.find((s) => s.id === segmentId);
            var fromCheckpoint = checkpoints.find((c) => segment.fromCheckpointId == c.id);
            var toCheckpoint = checkpoints.find((c) => segment.toCheckpointId == c.id);
            //drawCheckpoint(fromCheckpoint);
            //drawCheckpoint(toCheckpoint);
            drawSegment(segment);
            setSegmentDetails(fromCheckpoint, toCheckpoint, segment);
            drawElevationChart()
        }

        setTimeout(fitMap, 100);
    }

    function fitMap() {
        var bounds = layer.getBounds();
        map.fitBounds(bounds);
    }

    function setSegmentDetails(fromCheckpoint, toCheckpoint, segment) {
        document.getElementById("segment-checkpoint-start").innerText = fromCheckpoint.name;
        document.getElementById("segment-checkpoint-end").innerText = toCheckpoint.name;
        document.getElementById("segment-distance").innerText = `${segment.distance} miles`;
        document.getElementById("segment-total-distance").innerText = `${segment.totalDistance} miles`;
    }

    function addRaceToRadioGroup(div, race) {
        var input = document.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("class", "btn-check");
        input.setAttribute("name", "btnRace");
        input.setAttribute("id", `btnRace-${race.code}`);
        input.setAttribute("autocomplete", "off");
        input.setAttribute("value", race.code);
        input.addEventListener("change", function () {
            selectRace(this.value);
        });

        var label = document.createElement("label");
        label.setAttribute("class", "btn btn-outline-primary");
        label.setAttribute("for", `btnRace-${race.code}`);
        label.innerHTML = race.code;

        div.appendChild(input);
        div.appendChild(label);
    }

    function drawCheckpoint(checkpoint) {
        var checkpointGeoJson = JSON.parse(checkpoint.geoJson);

        var circle = L.circle([checkpointGeoJson.geometry.coordinates[1], checkpointGeoJson.geometry.coordinates[0]], {
            color: "red",
            fillColor: "red",
            fillOpacity: 1,
            radius: 30
        }).addTo(map);
        circle.bindPopup(checkpoint.name);
    }

    function calculateDistance(coords) {
        var totalDistance = 0.00;

        for (let i = 0; i < coords.length; i++) {
            if (i > 0) {
                var pointA = L.latLng(coords[i - 1][1], coords[i - 1][0]);
                var pointB = L.latLng(coords[i][1], coords[i][0]);
                var pointDistance = pointA.distanceTo(pointB);
                totalDistance = totalDistance + pointDistance;
            }
        }

        return totalDistance * 0.000621371192;
    }
</script>
}