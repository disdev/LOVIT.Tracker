@page
@using Models
@using Utilities
@model LOVIT.Tracker.Pages.Races.IndexModel

<div class="row">
    <div class="col">
        <h1 class="p-2">@Model.Race.Code</h1>
    </div>
</div>
<div class="row">
    <div class="col">
        <div id="race-grid-@Model.Race.Code" data-race="@Model.Race.Code" class="grid ag-theme-alpine"></div>
    </div>
</div>

@section Scripts {
<script src="https://cdn.rawgit.com/katmore/gpu-loading-overlay/master/src/loadingOverlay.js"></script>
<script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
<script src="https://cdn.datatables.net/1.13.1/js/jquery.dataTables.min.js"></script>
<script type="text/javascript">
    let race, leaders, segments, checkins, gridOptions;
    let raceId = "@Html.Raw(Model.Race.Id)";
    let spinner = loadingOverlay.activate();

    async function getData() {
        race = await getRace();
        leaders = await getLeaders();
        segments = await getSegments();
        checkins = await getCheckins();
    }

    async function getRace() {
        const response = await fetch(`/api/races/${raceId}`);
        return response.json();
    }

    async function getLeaders() {
        const response = await fetch(`/api/leaders/${raceId}`);
        return response.json();
    }

    async function getSegments() {
        const response = await fetch(`/api/segments/${raceId}`);
        return response.json();
    }

    async function getCheckins() {
        const response = await fetch(`/api/checkins/${raceId}`);
        return response.json();
    }

    function calculatePaceInSeconds(paceInSeconds) {
        var minutes = (paceInSeconds / 60).ToString();
        var seconds = String(paceInSeconds % 60).padStart(2, "0");
    }

    function formatSecondsToTime(secondsElapsed) {
        var hours = Math.floor(secondsElapsed / 3600);
        var minutes = Math.floor((secondsElapsed - hours * 3600) / 60);
        var seconds = Math.round(secondsElapsed - hours * 3600 - minutes * 60);

        if (secondsElapsed >= 3600) {
            return `${hours}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
        } else {
            return `${minutes}:${String(seconds).padStart(2, "0")}`;
        }
    }

    function autoSizeColumns(skipHeader) {
        const allColumnIds = [];
        gridOptions.columnApi.getColumns().forEach((column) => {
            allColumnIds.push(column.getId());
        });

        gridOptions.columnApi.autoSizeColumns(allColumnIds, skipHeader);
    }

    getData().then((data) => {
        var raceStart = new Date(race.start);

        var columns = [
            { headerName: "#", field: "place", pinned: "left" },
            { headerName: "Bib", field: "bib", pinned: "left" },
            { headerName: "Participant", field: "participant", pinned: "left", cellRenderer: function(params) {
                let id = "";
                if (params.data.bib) {
                    id = params.data.bib;
                } else {
                    id = params.data.participantId;
                }
                return `<a href="/participants?id=${id}">${params.value}</a>`;
            }}
        ];

        segments.forEach((segment) => {
            columns.push({
                headerName: `${segment.totalDistance}`,
                field: `segment${segment.order}`
            });
        });

        var tableData = [];
        var placeIndex = 1;
        leaders.forEach((leader) => {
            var leaderData = {
                place: placeIndex,
                bib: leader.participant.bib,
                participant: leader.participant.fullName,
                participantId: leader.participant.id
            };

            var leaderCheckins = checkins.filter((checkin) => checkin.participantId === leader.participantId);

            segments.forEach((segment) => {
                var checkin = leaderCheckins.find((checkin) => checkin.segmentId === segment.id);
                if (checkin) {
                    var elapsed = new Date(checkin.when) - raceStart;
                    leaderData[`segment${segment.order}`] = formatSecondsToTime(elapsed / 1000);
                }
            });

            tableData.push(leaderData);

            placeIndex++;
        });

        gridOptions = {
            domLayout: "autoHeight",
            columnDefs: columns,
            rowData: tableData,
            suppressColumnVirtualisation: true
        };

        var gridDiv = document.getElementById(`race-grid-${race.code}`);
        new agGrid.Grid(gridDiv, gridOptions);
        autoSizeColumns(false);
        loadingOverlay.cancel(spinner);
    });
</script>
}