@page "{id}"
@using Models
@using Utilities
@model LOVIT.Tracker.Pages.Races.IndexModel

@section Styles {
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator.min.css" rel="stylesheet">
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator_bootstrap5.min.css" rel="stylesheet">
<style>
    #race-grid {
        max-height: 100%;
        width: 100%;
    }
</style>
}

<div class="row">
    <div class="col">
        <h1 class="p-2">@Model.Race.Code</h1>
    </div>
</div>
<div class="row">
    <div class="col">
        <div id="race-grid"></div>
    </div>
</div>

@section Scripts {
<script src="https://cdn.rawgit.com/katmore/gpu-loading-overlay/master/src/loadingOverlay.js"></script>
<script src="https://cdn.jsdelivr.net/npm/luxon@3.2.1/build/global/luxon.min.js"></script>
<script src="https://unpkg.com/tabulator-tables@5.4.3/dist/js/tabulator.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
<script type="text/javascript">
    let race, leaders, segments, checkins, gridOptions;
    let raceId = "@Html.Raw(Model.Race.Id)";
    let spinner = loadingOverlay.activate();

    async function getData() {
        race = await getRace();
        leaders = await getLeaders();
        segments = await getSegments();
        checkins = await getCheckins();
    }

    async function getRace() {
        const response = await fetch(`/api/races/${raceId}`);
        return response.json();
    }

    async function getLeaders() {
        const response = await fetch(`/api/leaders/${raceId}`);
        return response.json();
    }

    async function getSegments() {
        const response = await fetch(`/api/segments/${raceId}`);
        return response.json();
    }

    async function getCheckins() {
        const response = await fetch(`/api/checkins/${raceId}`);
        return response.json();
    }

    function formatSecondsToTime(secondsElapsed) {
        var hours = Math.floor(secondsElapsed / 3600);
        var minutes = Math.floor((secondsElapsed - hours * 3600) / 60);
        var seconds = Math.round(secondsElapsed - hours * 3600 - minutes * 60);

        if (secondsElapsed >= 3600) {
            return `${hours}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
        } else {
            return `${minutes}:${String(seconds).padStart(2, "0")}`;
        }
    }

    function autoSizeColumns(skipHeader) {
        const allColumnIds = [];
        gridOptions.columnApi.getColumns().forEach((column) => {
            allColumnIds.push(column.getId());
        });

        gridOptions.columnApi.autoSizeColumns(allColumnIds, skipHeader);
    }

    getData().then((data) => {
        var tableData = [];
        var raceStart = new Date(race.start);

        var columns = [
            { title: "Place", field: "place", width: 60, vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false, frozen: true },
            { title: "Bib", field: "bib", vertAlign: "middle", hozAlign: "center", headerHozAlign: "center", headerSort: false, frozen: true },
            { title: "Name", field: "name", vertAlign: "middle", headerSort: false, frozen: true, formatter:"link", formatterParams: {
                url: function (cell) { 
                    var data = cell.getData();
                    return `/participants/${data.participantId}`;
                }
            }}
        ];

        segments.forEach((segment) => {
            columns.push({
                title: `${segment.totalDistance}`,
                field: `segment${segment.order}`,
                vertAlign: "middle", 
                hozAlign: "center", 
                headerHozAlign: "center", 
                headerSort: false
            });
        });

        
        var placeIndex = 1;
        leaders.forEach((leader) => {
            var leaderData = {
                place: placeIndex,
                bib: leader.participant.bib,
                name: leader.participant.fullName,
                participantId: leader.participant.bibOrId
            };

            var leaderCheckins = checkins.filter((checkin) => checkin.participantId === leader.participantId);

            segments.forEach((segment) => {
                var checkin = leaderCheckins.find((checkin) => checkin.segmentId === segment.id);
                if (checkin) {
                    var elapsed = new Date(checkin.when) - raceStart;
                    leaderData[`segment${segment.order}`] = formatSecondsToTime(elapsed / 1000);
                }
            });

            tableData.push(leaderData);

            placeIndex++;
        });

        var table = new Tabulator("#race-grid",{
            data: tableData,
            layout: "fitDataTable",
            columns: columns
        });

        loadingOverlay.cancel(spinner);
    });
</script>
}